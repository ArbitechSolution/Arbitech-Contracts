pragma solidity 0.8.13;
// SPDX-License-Identifier: MIT
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    // event Transfer(address indexed from, address indexed to, uint256 value);
    // event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract ERC20 is IERC20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    event Transfer(address indexed sender, address indexed recipient, uint256 indexed amount);
    event Approval(address indexed owner, address indexed spender, uint256 indexed amount);
    string private _name = "Crash Casino Game";
    string private _symbol = "CCG";
    uint256 private _decimals = 18;
    uint256 private _totalSupply = 100000000 *10**18;
    address public _owner;
    constructor() {
    
        _owner = msg.sender;
    }
    modifier OnlyOwner1
    {
        require(_owner == msg.sender, "Only Owner Call this functionality");
        _;
    }
    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view virtual returns (uint256) {
        return _decimals;
    }
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        require(_balances[sender] >= amount && _allowances[sender][msg.sender] >= amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        _balances[sender] -= amount;
        _balances[recipient] += amount;
       _allowances[sender][msg.sender]= currentAllowance - amount;
        emit Transfer(sender,recipient,amount);
        return true;
    }

    // function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
    //     _approve(_owner, spender, _allowances[_owner][spender] + addedValue);
    //     return true;
    // }

    // function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
    //     uint256 currentAllowance = _allowances[_owner][spender];
    //     require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    //     unchecked {
    //         _approve(_owner, spender, currentAllowance - subtractedValue);
    //     }

    //     return true;
    // }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }


    function mint(address account, uint256 amount) public virtual OnlyOwner1 {
        require(account != address(0), "ERC20: mint to the zero address");
        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function burn(address account, uint256 amount) public virtual OnlyOwner1 {
        require(account != address(0), "ERC20: burn from the zero address");
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract Crash_Casino_Game is ERC20{
    
    constructor()
    {
    }
}