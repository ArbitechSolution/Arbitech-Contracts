//  0x7F139A1636c3C0d43f43910dDf7fb8812dE03CE1  BUSD
//  0x85d809495a69a68Deb48dc3e528F6fE635Fd4955  signer


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

interface IBEP20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8);

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory);

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory);

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor()
    {   _transferOwnership(_msgSender());   }

   
    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract Pausable is Context {

    event Paused(address account);
    event Unpaused(address account);

    bool private _paused;

    constructor() {
        _paused = false;
    }

    function paused()
        public 
        view 
        virtual 
        returns (bool) 
    {   return _paused;     }

    modifier whenNotPaused(){
        require(!paused(), "Pausable: paused");
        _;
    }

    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    function _pause()
        internal 
        virtual 
        whenNotPaused 
    {
      _paused = true;
      emit Paused(_msgSender());
    }

    function _unpause() 
        internal 
        virtual 
        whenPaused 
    {
      _paused = false;
      emit Unpaused(_msgSender());
    }
}

abstract contract SignVerify {

    function splitSignature(bytes memory sig)
        internal
        pure
        returns(uint8 v, bytes32 r, bytes32 s)
    {
        require(sig.length == 65);

        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            v := byte(0, mload(add(sig, 96)))
        }
        return (v, r, s);
    }

    function recoverSigner(bytes32 hash, bytes memory signature)
        internal
        pure
        returns(address)
    {
        (uint8 v, bytes32 r, bytes32 s) = splitSignature(signature);

        return ecrecover(hash, v, r, s);
    }

    function toString(address account)
        public
        pure 
        returns(string memory) {
        return toString(abi.encodePacked(account));
    }

    function toString(bytes memory data)
        internal
        pure
        returns(string memory) 
    {
        bytes memory alphabet = "0123456789abcdef";

        bytes memory str = new bytes(2 + data.length * 2);
        str[0] = "0";
        str[1] = "x";
        for (uint256 i = 0; i < data.length; i++) {
            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];
            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];
        }
        return string(str);
    }
}

abstract contract ReentrancyGuard {

    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() 
    {   _status = _NOT_ENTERED;     }

    modifier nonReentrant() {
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
        _status = _ENTERED;
        _;
        _status = _NOT_ENTERED;
    }
}

contract Withdrawl is SignVerify, Ownable, Pausable, ReentrancyGuard{

    IBEP20 public BUSD;
    address signerAddress;

    uint256 public Time = 24 hours;
    uint256 public Amount = 250000000000000000000;
    mapping (address => uint256) Passed;
    mapping (bytes32 => bool) public usedHash;

    constructor(address signerAddress_, IBEP20 BUSD_)
    {
        signerAddress = signerAddress_;
        BUSD = BUSD_;
    }

    function userBNBWithdraw(uint256 amount, uint256 _nonce, bytes memory signature)
    external
    nonReentrant
    whenNotPaused
    {
        require(msg.sender == tx.origin,"External Err");
        require(Passed[msg.sender]<block.timestamp," Wait for Next Transection ");
        require(amount <= Amount , "Limit Exceeds");
        internalBNB(amount,_nonce,signature);
    }

    function userTOKENWithdraw(uint256 amount, uint256 _nonce, bytes memory signature)
    external
    nonReentrant
    whenNotPaused
    {
        require(msg.sender == tx.origin,"External Err");
        require(Passed[msg.sender]<block.timestamp," Wait for Next Transection ");
        require(amount <= Amount , "Limit Exceeds");
        internalTOKEN(amount,_nonce,signature);
    }

    function internalBNB(uint256 amount, uint256 _nonce, bytes memory signature)
    internal
    {
        bytes32 hash = keccak256(   
              abi.encodePacked(   
                toString(address(this)),   
                toString(msg.sender),
                _nonce,
                amount
              )
          );

        require(!usedHash[hash], "Invalid Hash");
        require(recoverSigner(hash, signature) == signerAddress, "Signature Failed");   
        
        Passed[msg.sender] = block.timestamp + Time;
        usedHash[hash] = true;
        payable(msg.sender).transfer(amount);

    }

    function internalTOKEN(uint256 amount, uint256 _nonce, bytes memory signature)
    internal
    {
        bytes32 hash = keccak256(   
              abi.encodePacked(   
                toString(address(this)),   
                toString(msg.sender),
                _nonce,
                amount
              )
          );

        require(!usedHash[hash], "Invalid Hash");
        require(recoverSigner(hash, signature) == signerAddress, "Signature Failed");   
        
        Passed[msg.sender] = block.timestamp + Time;
        usedHash[hash] = true;
        BUSD.transfer(msg.sender, amount);

    }

    function Pause()
        external
        onlyOwner
        nonReentrant
    {   _pause();   }

    function UnPause()
        external
        onlyOwner 
        nonReentrant
    {   _unpause();     }

    function SetTime(uint256 Time_)
        external
        onlyOwner
        nonReentrant
    {   Time = Time_;   }

    function SetAmount(uint256 Amount_)
        external
        onlyOwner
        nonReentrant
    {   Amount = Amount_;   }

    function withdrawToken(address token, uint256 amount)
        external
        onlyOwner
        nonReentrant
    {   IBEP20(token).transfer(owner(),amount);   }
    

    function withdrawBNB(uint256 amount)
        external
        onlyOwner
        nonReentrant
    {   payable(owner()).transfer(amount);  }

    function updateSign(address signerAddress_)
        external
        onlyOwner
        nonReentrant
    {   signerAddress = signerAddress_;}

    function Pay() external payable{}

}